@page "/SignIn"
@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims;
@using Microsoft.Extensions.Logging;
@using Microsoft.AspNetCore.Identity;

@using UnitAdmin.Areas.Identity;
@using UnitAdmin.Components;
@using UnitAdmin.Models;

@inject NavigationManager navman
@inject ILogger<SignIn> _logger;
@inject RevalidatingIdentityAuthenticationStateProvider<AppUser> _riasp

<h1 class="text-center">Sign In</h1>
<hr />
<div class="container">
    <div class="row">
        <div class="col-md-6">
            <hr />
            <section>
                <AuthorizeView>
                    <NotAuthorized Context="NoAuth">
                        <div class="container">
                            <EditForm Model="@input" OnInvalidSubmit="@InvalidSubmit" OnValidSubmit="@ValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <ServerSideValidator @ref="serverSideValidator" />
                                <hr />
                                <div class="container-fluid mycontainer">
                                    <div class="form-group row ">
                                        <div class="col">
                                            <label for="username">Username</label>
                                            <InputText class="mycontainer-inputsize" id="username" @bind-Value="input.Username" Width="100%" />
                                            <ValidationMessage For="@(() => input.Username)" />
                                        </div>

                                    </div>
                                    <div class="form-group row ">
                                        <div class="col">
                                            <label for="Password">Password</label>
                                            <InputText class="mycontainer-inputsize" id="Password" @bind-Value="input.Password" type="password" Width="100%" />
                                            <ValidationMessage For="@(() => input.Password)" />
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group row">
                                    <div class="col text-center">
                                        <label for="rememberMe">Remember Me</label>
                                        <InputCheckbox id="rememberMe" @bind-Value="@input.RememberMe" />
                                    </div>
                                </div>
                                <div class="col text-center">
                                    <button type="submit" class="btn btn-primary">SignIn</button>
                                </div>
                                @*<div class="form-group mycontainer-signin-navlinks">
                                    <NavLink class="nav-link" href="/PasswordForgot">
                                        <span class="oi oi-lock-locked oi-question-mark" aria-hidden="true"></span> Forgot your password?
                                    </NavLink>
                                    <NavLink class="nav-link" href="/SignUp">
                                        <span class="oi oi-pencil" aria-hidden="true"></span> Sign Up as a new user
                                    </NavLink>
                                    <NavLink class="nav-link" href="/ResendConfirmationEmail">
                                        <span class="oi oi-envelope-closed" aria-hidden="true"></span> Resend Confirmation Email
                                    </NavLink>
                                </div>*@
                            </EditForm>
                        </div>
                    </NotAuthorized>
                </AuthorizeView>
            </section>
        </div>
        @*<div class="col-md-4 col-md-offset-2">
            <section>
                <h4>Use another service to log in.</h4>
                <hr />
                @{
                    //if ((Model.ExternalLogins?.Count ?? 0) == 0)
                    if (true)
                    {
                        <div>
                            <p>
                                There are no external authentication services configured. See <a href="https://go.microsoft.com/fwlink/?LinkID=532715">this article</a>
                                for details on setting up this ASP.NET application to support logging in via external services.
                            </p>
                        </div>
                    }
                }
            </section>
        </div>*@
    </div>
</div>

@code {
    [CascadingParameter] public Task<AuthenticationState> AuthenticationStateTask { get; set; }
    [Parameter] public string ReturnUrl { get; set; } = "/";
    public AuthenticationState AuthState { get; set; }
    public ClaimsPrincipal CPUser { get; set; }
}
